using System;
using System.Collections.Generic;
using System.Linq;
using aweXpect.Options;

namespace aweXpect.Web.Results;

/// <summary>
///     Options for <see cref="ProblemDetailsResult{TType,TThat}" />.
/// </summary>
public class ProblemDetailsOptions
{
	private readonly StringEqualityOptions _detailOptions = new();
	private readonly StringEqualityOptions _instanceOptions = new();
	private readonly List<Func<string>> _parts = new();
	private readonly StringEqualityOptions _titleOptions = new();

	/// <summary>
	///     The title of a problem details object.
	///     <seealso href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails.title" />
	/// </summary>
	/// <remarks>
	///     A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the
	///     problem, except for purposes of localization(e.g., using proactive content negotiation;
	///     <see href="https://datatracker.ietf.org/doc/html/rfc7231#section-3.4" />).
	/// </remarks>
	public string? Title { get; private set; }

	/// <summary>
	///     The status of a problem details object.
	///     <seealso href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails.status" />
	/// </summary>
	/// <remarks>
	///     The HTTP status code (<see href="https://datatracker.ietf.org/doc/html/rfc7231#section-6" />) generated by the
	///     origin server for this occurrence of the problem.
	/// </remarks>
	public int? Status { get; private set; }

	/// <summary>
	///     The detail of a problem details object.
	///     <seealso href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails.instance" />
	/// </summary>
	/// <remarks>
	///     A human-readable explanation specific to this occurrence of the problem.
	/// </remarks>
	public string? Detail { get; private set; }

	/// <summary>
	///     The instance of a problem details object.
	///     <seealso href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails.instance" />
	/// </summary>
	/// <remarks>
	///     A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further
	///     information if dereferenced.
	/// </remarks>
	public string? Instance { get; private set; }

	/// <summary>
	///     Sets the expected <paramref name="title" />.
	/// </summary>
	public StringEqualityOptions WithTitle(string title)
	{
		Title = title;
		_parts.Add(() => $"title {Formatter.Format(title)}{_titleOptions}");
		return _titleOptions;
	}

	/// <summary>
	///     Sets the expected <paramref name="status" />.
	/// </summary>
	public void WithStatus(int status)
	{
		Status = status;
		_parts.Add(() => $"status {Formatter.Format(status)}");
	}

	/// <summary>
	///     Sets the expected <paramref name="detail" />.
	/// </summary>
	public StringEqualityOptions WithDetail(string detail)
	{
		Detail = detail;
		_parts.Add(() => $"detail {Formatter.Format(detail)}{_detailOptions}");
		return _detailOptions;
	}

	/// <summary>
	///     Sets the expected <paramref name="instance" />.
	/// </summary>
	public StringEqualityOptions WithInstance(string instance)
	{
		Instance = instance;
		_parts.Add(() => $"instance {Formatter.Format(instance)}{_instanceOptions}");
		return _instanceOptions;
	}

	/// <summary>
	///     Checks if the <paramref name="title" /> matches the expected <see cref="Title" />.
	/// </summary>
	public bool IsTitleConsideredEqualTo(string? title)
		=> _titleOptions.AreConsideredEqual(title, Title);

	/// <summary>
	///     Checks if the <paramref name="detail" /> matches the expected <see cref="Detail" />.
	/// </summary>
	public bool IsDetailConsideredEqualTo(string? detail)
		=> _detailOptions.AreConsideredEqual(detail, Detail);

	/// <summary>
	///     Checks if the <paramref name="instance" /> matches the expected <see cref="Instance" />.
	/// </summary>
	public bool IsInstanceConsideredEqualTo(string? instance)
		=> _instanceOptions.AreConsideredEqual(instance, Instance);

	/// <inheritdoc cref="object.ToString()" />
	public override string ToString()
		=> _parts.Count switch
		{
			0 => "",
			1 => $" and {_parts[0].Invoke()}",
			_ => $", {string
				.Join(", ", _parts
					.Take(_parts.Count - 1)
					.Select(part => part.Invoke()))} and {_parts[^1].Invoke()}",
		};
}
